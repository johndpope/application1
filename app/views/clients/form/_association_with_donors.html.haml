- if industry_id
	- associated_products = Product.joins(:client).where("clients.id" => @client.id).where.not(parent_id: nil).pluck(:parent_id)
	- clients = Client.distinct.joins("INNER JOIN products ON products.client_id=clients.id").where(industry_id: industry_id).where.not(id: @client.id).where.not("products.id" => associated_products).order("is_content_donor, created_at")
	- if clients.any?
		.box.box-default.box-solid.collapsed-box
			.box-header.with-border
				%h3.box-title Association with Donor Clients
				.box-tools.pull-right
					%span{data: {toggle: "tooltip", "original-title" => "#{clients.size} clients found"}, class: "badge bg-light-blue"}= clients.size
					= button_tag '', class: "btn btn-box-tool", data:{widget: 'collapse'} do
						= fa_icon 'plus'
			.box-body
				- clients.each do |client|
					.row
						.col-md-12
							%p
								%strong= client.name
							.row
								.col-md-12
									%ul.list-group.checked-list-box
										- client.products.each do |product|
											- unless associated_products.include? product.id
												%li.list-group-item{data: {color: 'success'}}
													%span.state-icon.glyphicon.glyphicon-unchecked
													= product.name
													= check_box_tag 'donor_client_products[]', product.id, false, {class: 'hidden'}

//refactor
:javascript
	$('.list-group.checked-list-box .list-group-item').each(function () {
			// Settings
			var $widget = $(this),
					$checkbox = $('input[type="checkbox"]',$(this)) !== 'undefined' ? $('input[type="checkbox"]',$(this)) : $('<input type="checkbox" class="hidden" />'),
					color = ($widget.data('color') ? $widget.data('color') : "primary"),
					style = ($widget.data('style') == "button" ? "btn-" : "list-group-item-"),
					settings = {
							on: {
									icon: 'glyphicon glyphicon-check'
							},
							off: {
									icon: 'glyphicon glyphicon-unchecked'
							}
					};

			$widget.css('cursor', 'pointer')
			$widget.append($checkbox);

			// Event Handlers
			$widget.on('click', function () {
					$checkbox.prop('checked', !$checkbox.is(':checked'));
					$checkbox.triggerHandler('change');
					updateDisplay();
			});
			$checkbox.on('change', function () {
					updateDisplay();
			});


			// Actions
			function updateDisplay() {
					var isChecked = $checkbox.is(':checked');

					// Set the button's state
					$widget.data('state', (isChecked) ? "on" : "off");

					// Set the button's icon
					$widget.find('.state-icon')
							.removeClass()
							.addClass('state-icon ' + settings[$widget.data('state')].icon);

					// Update the button's color
					if (isChecked) {
							$widget.addClass(style + color + ' active');
					} else {
							$widget.removeClass(style + color + ' active');
					}
			}

			// Initialization
			function init() {

					if ($widget.data('checked') == true) {
							$checkbox.prop('checked', !$checkbox.is(':checked'));
					}

					updateDisplay();

					// Inject the icon if applicable
					if ($widget.find('.state-icon').length == 0) {
							$widget.prepend('<span class="state-icon ' + settings[$widget.data('state')].icon + '"></span>');
					}
			}
			init();
	});
